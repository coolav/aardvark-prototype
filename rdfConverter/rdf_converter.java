/*
 * COPYRIGHT (c) 2009 by Institute of Computer Science, 
 * Foundation for Research and Technology - Hellas
 * Contact: 
 *      POBox 1385, Heraklio Crete, GR-700 13 GREECE
 *      Tel:+30-2810-391632
 *      Fax: +30-2810-391638
 *      E-mail: isl@ics.forth.gr
 *      http://www.ics.forth.gr/isl/cci.html
 * 
 * This file is part of RDF Label Converter between CIDOC CRM schema versions.
 *
 *  RDF Label Converter is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  RDF Label Converter is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */
package uib.rdfConverter;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import excel.Excel;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import javax.xml.transform.TransformerException;
import org.apache.poi.hssf.usermodel.HSSFSheet;

/*-----------------------------------------------------
class rdf_converter
-------------------------------------------------------*/
public class rdf_converter extends javax.swing.JFrame {
    /*-----------------------------------------------------
    rdf_converter()
    -------------------------------------------------------*/

    File[] selectedFiles;
    File destinationDir;
    Vector<File> selectedFilesAndFolders;
    String currentPath = System.getProperty("user.dir");
    String helpFileName = currentPath + "\\lib\\rdf_converter_help_EN.chm";
    String ExcelFileName = currentPath + "\\mappings.xls";
    String imageFile = currentPath + "\\lib\\logo_small.gif";
    String sheetName = "Sheet1";
    JFileChooser fcBrowseInputFile = new JFileChooser();
    JFileChooser fcBrowseOutputDest = new JFileChooser();
    Excel newF = new Excel(ExcelFileName);
    private int currentLanguage = 0;
    public Config config;

    public rdf_converter() {

        // initialize the form
        initComponents();
        config = new Config();
        // centralize the frame to current screen dimensions
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((d.width - getSize().width) / 2, (d.height - getSize().height) / 2);
        setVisible(true);
        initCompos();

        excelFileTextField.setText(ExcelFileName);
        inputFileLabel.setToolTipText(config.GetTranslation("tooltipINPUT", currentLanguage));
        outputFileLabel.setToolTipText(config.GetTranslation("tooltipOUTPUT", currentLanguage));
        excelFileLabel.setToolTipText(config.GetTranslation("tooltipEXCEL", currentLanguage));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileLabel = new javax.swing.JLabel();
        inputFileTextField = new javax.swing.JTextField();
        browseInputFile = new javax.swing.JButton();
        initialLabel = new javax.swing.JLabel();
        initialComboBox = new javax.swing.JComboBox();
        finalLabel = new javax.swing.JLabel();
        finalComboBox = new javax.swing.JComboBox();
        convertButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        outputFileTextField = new javax.swing.JTextField();
        outputFileLabel = new javax.swing.JLabel();
        browseOutputDest = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        LanguageMenu = new javax.swing.JMenu();
        EnglishRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        GreekRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        LanguageMenu1 = new javax.swing.JMenu();
        EnglishRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        GreekRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        LanguageMenu2 = new javax.swing.JMenu();
        EnglishRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        GreekRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        LanguageMenu3 = new javax.swing.JMenu();
        EnglishRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        GreekRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        excelFileLabel = new javax.swing.JLabel();
        excelFileTextField = new javax.swing.JTextField();
        browseExcel = new javax.swing.JButton();
        jMenuBar5 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        languageMenu = new javax.swing.JMenu();
        EnglishRadioButtonMenuItem4 = new javax.swing.JRadioButtonMenuItem();
        GreekRadioButtonMenuItem4 = new javax.swing.JRadioButtonMenuItem();
        editExcelMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        tableContentsMenuItem = new javax.swing.JMenuItem();
        HelpMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RDF Label Converter between CIDOC CRM schema versions");
        setFont(new java.awt.Font("Arial", 0, 10));
        setResizable(false);

        inputFileLabel.setText("Choose input file or directory");

        inputFileTextField.setEditable(false);
        inputFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileTextFieldActionPerformed(evt);
            }
        });

        browseInputFile.setText("Browse");
        browseInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputFileActionPerformed(evt);
            }
        });

        initialLabel.setText("Initial form");

        initialComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        initialComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialComboBoxActionPerformed(evt);
            }
        });

        finalLabel.setText("Final form");

        finalComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        convertButton.setText("Convert");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        outputFileTextField.setEditable(false);
        outputFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileTextFieldActionPerformed(evt);
            }
        });

        outputFileLabel.setText("Choose destination directory");

        browseOutputDest.setText("Browse");
        browseOutputDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputDestActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Options");

        LanguageMenu.setText("Language");

        EnglishRadioButtonMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        EnglishRadioButtonMenuItem.setSelected(true);
        EnglishRadioButtonMenuItem.setText("English");
        EnglishRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnglishRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu.add(EnglishRadioButtonMenuItem);

        GreekRadioButtonMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        GreekRadioButtonMenuItem.setText("Greek");
        GreekRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreekRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu.add(GreekRadioButtonMenuItem);

        jMenu3.add(LanguageMenu);

        jMenuItem3.setText("Edit Excel");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editExcelMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Help");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Table of contents...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("File");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuBar2.add(jMenu4);

        jMenu5.setText("Options");

        LanguageMenu1.setText("Language");

        EnglishRadioButtonMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        EnglishRadioButtonMenuItem1.setSelected(true);
        EnglishRadioButtonMenuItem1.setText("English");
        EnglishRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnglishRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu1.add(EnglishRadioButtonMenuItem1);

        GreekRadioButtonMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        GreekRadioButtonMenuItem1.setText("Greek");
        GreekRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreekRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu1.add(GreekRadioButtonMenuItem1);

        jMenu5.add(LanguageMenu1);

        jMenuItem5.setText("Edit Excel");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editExcelMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuBar2.add(jMenu5);

        jMenu6.setText("Help");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Table of contents...");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuBar2.add(jMenu6);

        jMenu7.setText("File");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem7);

        jMenuBar3.add(jMenu7);

        jMenu8.setText("Options");

        LanguageMenu2.setText("Language");

        EnglishRadioButtonMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        EnglishRadioButtonMenuItem2.setSelected(true);
        EnglishRadioButtonMenuItem2.setText("English");
        EnglishRadioButtonMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnglishRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu2.add(EnglishRadioButtonMenuItem2);

        GreekRadioButtonMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        GreekRadioButtonMenuItem2.setText("Greek");
        GreekRadioButtonMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreekRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu2.add(GreekRadioButtonMenuItem2);

        jMenu8.add(LanguageMenu2);

        jMenuItem8.setText("Edit Excel");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editExcelMenuItemActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem8);

        jMenuBar3.add(jMenu8);

        jMenu9.setText("Help");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Table of contents...");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem9);

        jMenuBar3.add(jMenu9);

        jMenu10.setText("File");

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Exit");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem10);

        jMenuBar4.add(jMenu10);

        jMenu11.setText("Options");

        LanguageMenu3.setText("Language");

        EnglishRadioButtonMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        EnglishRadioButtonMenuItem3.setSelected(true);
        EnglishRadioButtonMenuItem3.setText("English");
        EnglishRadioButtonMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnglishRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu3.add(EnglishRadioButtonMenuItem3);

        GreekRadioButtonMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        GreekRadioButtonMenuItem3.setText("Greek");
        GreekRadioButtonMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreekRadioButtonMenuItemActionPerformed(evt);
            }
        });
        LanguageMenu3.add(GreekRadioButtonMenuItem3);

        jMenu11.add(LanguageMenu3);

        jMenuItem11.setText("Edit Excel");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editExcelMenuItemActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem11);

        jMenuBar4.add(jMenu11);

        jMenu12.setText("Help");

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Table of contents...");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItem12);

        jMenuBar4.add(jMenu12);

        excelFileLabel.setText("Choose Excel file for mapping");

        excelFileTextField.setEditable(false);
        excelFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelFileTextFieldActionPerformed(evt);
            }
        });

        browseExcel.setText("Browse");
        browseExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseExcelActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar5.add(fileMenu);

        optionsMenu.setText("Options");

        languageMenu.setText("Language");

        EnglishRadioButtonMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        EnglishRadioButtonMenuItem4.setSelected(true);
        EnglishRadioButtonMenuItem4.setText("English");
        EnglishRadioButtonMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnglishRadioButtonMenuItemActionPerformed(evt);
            }
        });
        languageMenu.add(EnglishRadioButtonMenuItem4);

        GreekRadioButtonMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        GreekRadioButtonMenuItem4.setText("Greek");
        GreekRadioButtonMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreekRadioButtonMenuItemActionPerformed(evt);
            }
        });
        languageMenu.add(GreekRadioButtonMenuItem4);

        optionsMenu.add(languageMenu);

        editExcelMenuItem.setText("Edit Excel");
        editExcelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editExcelMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(editExcelMenuItem);

        jMenuBar5.add(optionsMenu);

        helpMenu.setText("Help");

        tableContentsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        tableContentsMenuItem.setText("Table of contents...");
        tableContentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        helpMenu.add(tableContentsMenuItem);

        HelpMenuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        HelpMenuItemAbout.setText("About");
        HelpMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpMenuItemAboutActionPerformed(evt);
            }
        });
        helpMenu.add(HelpMenuItemAbout);

        jMenuBar5.add(helpMenu);

        setJMenuBar(jMenuBar5);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(excelFileLabel)
                    .add(outputFileLabel)
                    .add(inputFileLabel)
                    .add(initialLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, outputFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, inputFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .add(excelFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(browseInputFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .add(browseOutputDest, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .add(browseExcel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(convertButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(exitButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                            .add(initialComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(finalLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(finalComboBox, 0, 170, Short.MAX_VALUE)))
                .add(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(inputFileLabel)
                    .add(inputFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseInputFile))
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(outputFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(outputFileLabel)
                    .add(browseOutputDest))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(excelFileLabel)
                    .add(browseExcel)
                    .add(excelFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(initialLabel)
                    .add(finalLabel)
                    .add(finalComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(initialComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(exitButton)
                    .add(convertButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void browseInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInputFileActionPerformed
    System.out.println("OpenFileOrDirectoryChooserMenuItemActionPerformed()");
    fcBrowseInputFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES); // open both files and directories
    fcBrowseInputFile.setMultiSelectionEnabled(true);  // multiple selection ON
    fcBrowseInputFile.setCurrentDirectory(new File("C:\\"));
    // filter the type of files that can be selected (g.e. xml & xsl)
    ExampleFileFilter filter = new ExampleFileFilter();
    filter.addExtension("rdf");
    filter.addExtension("rdfs");
    filter.addExtension("owl");
    filter.setDescription("semantic web files");
    fcBrowseInputFile.setFileFilter(filter);
    int returnVal = fcBrowseInputFile.showOpenDialog(this); // open dialog
    if (returnVal == JFileChooser.APPROVE_OPTION) { // Open button is pressed
        selectedFiles = fcBrowseInputFile.getSelectedFiles(); // get the list of selected files/directories
        inputFileTextField.setText("");
        for (int i = 0; i < selectedFiles.length; i++) { // for each selected file/directory
            File file = selectedFiles[i];
            if (file.isFile()) { // case of file
                inputFileTextField.setText(inputFileTextField.getText() + " " + file.getAbsolutePath());
            }
            if (file.isDirectory()) { // case of directory
                inputFileTextField.setText(inputFileTextField.getText() + " " + file.getAbsolutePath());
            }
        }
    }
}//GEN-LAST:event_browseInputFileActionPerformed

private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed

    if (!inputFileTextField.getText().isEmpty() && !outputFileTextField.getText().isEmpty()) {
        TreeMap<String, String> substitutes;
        substitutes = new TreeMap();

        FileInputStream fr = null;
        String figure1 = initialComboBox.getSelectedItem().toString();
        String figure2 = finalComboBox.getSelectedItem().toString();

        List<String> row;
        List<List> list;

        Vector<String> results = new Vector();
        String res;
        HSSFSheet sheet = newF.getSheetByName(sheetName);


        if (sheet != null) {
            list = newF.getSheetData(sheet);
            list = newF.removeEmptyRows(list);

            int fig1 = list.get(0).indexOf(figure1);
            int fig2 = list.get(0).indexOf(figure2);

            for (int i = 1; i < list.size(); i++) {
                row = list.get(i);
                substitutes.put(row.get(fig1), row.get(fig2));
            }
        }

        selectedFilesAndFolders = new Vector();
        if (selectedFiles == null) {
            File file = new File(inputFileTextField.getText());
            if (file.isFile()) {
                selectedFilesAndFolders.add(file);
            } else {
                findFilesInDirectory(file);
            }
        } else {
            for (int i = 0; i < selectedFiles.length; i++) {
                File file = selectedFiles[i];
                if (file.isFile()) {
                    selectedFilesAndFolders.add(file);
                } else {
                    findFilesInDirectory(file);
                }
            }
        }

        for (int i = 0; i < selectedFilesAndFolders.size(); i++) { // for each selected file/directory
            File file = selectedFilesAndFolders.get(i);
            String lineString = "";
            String out_buf = "";
            int changesCounter = 0;
            if (file.isFile() && (checkFileExtension(file, ".rdf") || checkFileExtension(file, ".owl") || checkFileExtension(file, ".rdfs"))) { // case of file

                try {
                    String failReason = config.parseRDF(file.getAbsolutePath());
                    if (failReason != null) {
                        JOptionPane.showMessageDialog(this, "Convert failed:\n" + failReason);
                    } else {
                        out_buf = config.replaceRDFNodes(substitutes);
                        changesCounter = config.getChangesRdf();
                    }
                } catch (TransformerException e) {
                    System.err.println(e);
                }
                try {
                    File output;
                    if (destinationDir.isDirectory()) {
                        output = new File(destinationDir.getAbsolutePath() + "\\" + file.getName());
                    } else {
                        output = new File(destinationDir.getAbsolutePath());
                    }

                    Writer fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output), "UTF8"));
                    fw.write(out_buf);
                    fw.close();


                } catch (IOException e) {
                    changesCounter = 0;
                    JOptionPane.showMessageDialog(this, "Convert failed " + e.getMessage());
                    System.out.println(e);
                }
                results.add(file.getName() + " --> " + changesCounter + " " + config.GetTranslation("changes", currentLanguage));
                changesCounter = 0;
            } else {
                results.add(file.getName() + " --> " + config.GetTranslation("errorExtension", currentLanguage));
            }

        }
        res = "Files report:\n";
        for (int i = 0; i < results.size(); i++) {
            res = res + results.get(i) + "\n";
        }
        JOptionPane.showMessageDialog(this, res);
    } else if (inputFileTextField.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, config.GetTranslation("inputERR", currentLanguage));
    } else {
        JOptionPane.showMessageDialog(this, config.GetTranslation("outputERR", currentLanguage));
    }
}//GEN-LAST:event_convertButtonActionPerformed

private void inputFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_inputFileTextFieldActionPerformed

private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
    System.out.println("Exiting from menu...");
    System.exit(0);
}//GEN-LAST:event_exitButtonActionPerformed

private void initialComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialComboBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_initialComboBoxActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    System.out.println("Exiting from menu...");
    System.exit(0);
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

    try {
        Process p = Runtime.getRuntime().exec("cmd /c \"" + helpFileName + "\"", null, null);
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}//GEN-LAST:event_jMenuItem2ActionPerformed

private void EnglishRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnglishRadioButtonMenuItemActionPerformed
    GreekRadioButtonMenuItem4.setSelected(false);
    EnglishRadioButtonMenuItem4.setSelected(true);
    currentLanguage = 0;
    ChangeUILanguage();
}//GEN-LAST:event_EnglishRadioButtonMenuItemActionPerformed

private void GreekRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GreekRadioButtonMenuItemActionPerformed
    GreekRadioButtonMenuItem4.setSelected(true);
    EnglishRadioButtonMenuItem4.setSelected(false);
    currentLanguage = 1;
    ChangeUILanguage();
}//GEN-LAST:event_GreekRadioButtonMenuItemActionPerformed

private void editExcelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editExcelMenuItemActionPerformed
    System.out.println(ExcelFileName);
    try {
        Process p = Runtime.getRuntime().exec("cmd /c \"" + ExcelFileName + "\"", null, null);
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}//GEN-LAST:event_editExcelMenuItemActionPerformed

private void outputFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFileTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_outputFileTextFieldActionPerformed

private void browseOutputDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputDestActionPerformed
    System.out.println("OpenFileOrDirectoryChooserMenuItemActionPerformed()");

    if (inputFileTextField.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, config.GetTranslation("inputERR", currentLanguage));
    } else {
        if (selectedFiles.length == 1 && selectedFiles[0].isFile()) {
            fcBrowseOutputDest.setFileSelectionMode(JFileChooser.FILES_ONLY); // open both files and directories
        } else {
            fcBrowseOutputDest.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }
        fcBrowseOutputDest.setMultiSelectionEnabled(false);  // multiple selection ON
        fcBrowseOutputDest.setCurrentDirectory(new File("C:\\"));

        int returnVal = fcBrowseOutputDest.showOpenDialog(this); // open dialog
        if (returnVal == JFileChooser.APPROVE_OPTION) { // Open button is pressed
            destinationDir = fcBrowseOutputDest.getSelectedFile(); // get the list of selected files/directories
            outputFileTextField.setText(destinationDir.getAbsolutePath());
        }
        if (selectedFiles.length == 1 && selectedFiles[0].isFile()) {
            try {
                destinationDir.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error creating file. " + e.getMessage());
                System.err.println(e);
            }
        } else {
            if (!destinationDir.exists()) {
                destinationDir.mkdirs();
                destinationDir.setWritable(true);
            }
        }
    }
}//GEN-LAST:event_browseOutputDestActionPerformed

private void browseExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseExcelActionPerformed
    System.out.println("OpenFileOrDirectoryChooserMenuItemActionPerformed()");
    JFileChooser fc = new JFileChooser();
    fc.setFileSelectionMode(JFileChooser.FILES_ONLY); // open both files and directories
    fc.setMultiSelectionEnabled(false);  // multiple selection ON
    fc.setCurrentDirectory(new File("C:\\"));
    // filter the type of files that can be selected (g.e. xml & xsl)
    ExampleFileFilter filter = new ExampleFileFilter();
    filter.addExtension("xls");

    fc.setFileFilter(filter);
    int returnVal = fc.showOpenDialog(this); // open dialog
    if (returnVal == JFileChooser.APPROVE_OPTION) { // Open button is pressed
        ExcelFileName = fc.getSelectedFile().getAbsolutePath(); // get the list of selected files/directories
        newF = new Excel(ExcelFileName);
        initCompos();
        excelFileTextField.setText(fc.getSelectedFile().getAbsolutePath());
    }
}//GEN-LAST:event_browseExcelActionPerformed

private void excelFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelFileTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_excelFileTextFieldActionPerformed

private void HelpMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpMenuItemAboutActionPerformed
    String ProgramTitle = config.GetTranslation("BASIC_FORM_TITLE", currentLanguage);
    String Separator = "_____________________________________________";
    String About1 = config.GetTranslation("About1", currentLanguage);
    String spaces = "   ";
    String About2 = config.GetTranslation("About2", currentLanguage);
    String About3 = config.GetTranslation("About3", currentLanguage);
    String AboutTitle = config.GetTranslation("About", currentLanguage);

    String AboutWindowContents = ProgramTitle + "\n" + Separator + "\n" + About1 + "\n" + About2 + "\n" + spaces + About3 + "\n";
    new JOptionPane().showMessageDialog(this, AboutWindowContents, AboutTitle, JOptionPane.INFORMATION_MESSAGE, new ImageIcon(imageFile));
}//GEN-LAST:event_HelpMenuItemAboutActionPerformed

    /*----------------------------------------------------------------------
    main()
    ------------------------------------------------------------------------
    INPUT: the input arguments of the application:
    1. machine name 2. machine port 3.sis directory
    ------------------------------------------------------------------------*/
    public static void main(final String args[]) {
        // look and feel setup
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }

        // create rdf_converter class
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                rdf_converter TMS_DB_ADMIN = new rdf_converter();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem EnglishRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem EnglishRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem EnglishRadioButtonMenuItem2;
    private javax.swing.JRadioButtonMenuItem EnglishRadioButtonMenuItem3;
    private javax.swing.JRadioButtonMenuItem EnglishRadioButtonMenuItem4;
    private javax.swing.JRadioButtonMenuItem GreekRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem GreekRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem GreekRadioButtonMenuItem2;
    private javax.swing.JRadioButtonMenuItem GreekRadioButtonMenuItem3;
    private javax.swing.JRadioButtonMenuItem GreekRadioButtonMenuItem4;
    private javax.swing.JMenuItem HelpMenuItemAbout;
    private javax.swing.JMenu LanguageMenu;
    private javax.swing.JMenu LanguageMenu1;
    private javax.swing.JMenu LanguageMenu2;
    private javax.swing.JMenu LanguageMenu3;
    private javax.swing.JButton browseExcel;
    private javax.swing.JButton browseInputFile;
    private javax.swing.JButton browseOutputDest;
    private javax.swing.JButton convertButton;
    private javax.swing.JMenuItem editExcelMenuItem;
    private javax.swing.JLabel excelFileLabel;
    private javax.swing.JTextField excelFileTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox finalComboBox;
    private javax.swing.JLabel finalLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JComboBox initialComboBox;
    private javax.swing.JLabel initialLabel;
    private javax.swing.JLabel inputFileLabel;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuBar jMenuBar5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenu languageMenu;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JLabel outputFileLabel;
    private javax.swing.JTextField outputFileTextField;
    private javax.swing.JMenuItem tableContentsMenuItem;
    // End of variables declaration//GEN-END:variables

    /*----------------------------------------------------------------------
    ChangeUILanguage()
    ------------------------------------------------------------------------
    FUNCTION: changes the UI titles according to the selected language
    CALLED BY: GreekRadioButtonMenuItemActionPerformed / EnglishRadioButtonMenuItemActionPerformed
    todo: get the strings from external xml file with translations
    ------------------------------------------------------------------------*/
    private void ChangeUILanguage() {
        setTitle(config.GetTranslation("BASIC_FORM_TITLE", currentLanguage));
        fileMenu.setText(config.GetTranslation("file", currentLanguage));
        helpMenu.setText(config.GetTranslation("help", currentLanguage));
        optionsMenu.setText(config.GetTranslation("option", currentLanguage));
        exitMenuItem.setText(config.GetTranslation("exit", currentLanguage));
        tableContentsMenuItem.setText(config.GetTranslation("Table_of_contents", currentLanguage));
        HelpMenuItemAbout.setText(config.GetTranslation("About", currentLanguage));
        editExcelMenuItem.setText(config.GetTranslation("excel", currentLanguage));
        inputFileLabel.setText(config.GetTranslation("browse", currentLanguage));
        excelFileLabel.setText(config.GetTranslation("excelFile", currentLanguage));
        initialLabel.setText(config.GetTranslation("from", currentLanguage));
        finalLabel.setText(config.GetTranslation("to", currentLanguage));
        outputFileLabel.setText(config.GetTranslation("dest", currentLanguage));
        languageMenu.setText(config.GetTranslation("Language", currentLanguage));
        EnglishRadioButtonMenuItem4.setText("  " + config.GetTranslation("English", currentLanguage));
        GreekRadioButtonMenuItem4.setText("  " + config.GetTranslation("Greek", currentLanguage));
        browseInputFile.setText(config.GetTranslation("search", currentLanguage));
        convertButton.setText(config.GetTranslation("convert", currentLanguage));
        exitButton.setText(config.GetTranslation("exit", currentLanguage));
        browseOutputDest.setText(config.GetTranslation("search", currentLanguage));
        browseExcel.setText(config.GetTranslation("search", currentLanguage));
        inputFileLabel.setToolTipText(config.GetTranslation("tooltipINPUT", currentLanguage));
        outputFileLabel.setToolTipText(config.GetTranslation("tooltipOUTPUT", currentLanguage));
        excelFileLabel.setToolTipText(config.GetTranslation("tooltipEXCEL", currentLanguage));
    }

    private void findFilesInDirectory(java.io.File folder) {
        java.io.File[] list = folder.listFiles();
        for (int i = 0; i < list.length; i++) {
            if (list[i].isDirectory()) {
                findFilesInDirectory(list[i]);
            } else {
                selectedFilesAndFolders.add(list[i]);
            }
        }
    }

    private void initCompos() {

        List<String> row;
        List<List> list;
        Vector compo1 = new Vector();
        int i;

        HSSFSheet sheet = newF.getSheetByName(sheetName);
        if (sheet != null) {
            convertButton.setEnabled(true);
            list = newF.getSheetData(sheet);
            list = newF.removeEmptyRows(list);
            if (!list.isEmpty()) {
                row = list.get(0);
                if (!row.get(0).equals("")) {
                    for (i = 0; i < row.size(); i++) {
                        if (!row.get(i).equals("")) {
                            compo1.add(row.get(i));
                        }
                    }
                    initialComboBox.setModel(new javax.swing.DefaultComboBoxModel(compo1));
                    finalComboBox.setModel(new javax.swing.DefaultComboBoxModel(compo1));
                } else {
                    JOptionPane.showMessageDialog(this, config.GetTranslation("ExcelERR", currentLanguage));
                    convertButton.setEnabled(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, config.GetTranslation("ExcelERR", currentLanguage));
                convertButton.setEnabled(false);
            }
        } else {
            JOptionPane.showMessageDialog(this, config.GetTranslation("sheetNameERR", currentLanguage));
            convertButton.setEnabled(false);
        }
    }

    private boolean checkFileExtension(File file, String fileExtension) {
        int lastDotIndex = file.getName().lastIndexOf(".");
        String extension = file.getName().substring(lastDotIndex);

        if (extension.equalsIgnoreCase(fileExtension)) {
            return true;
        } else {
            return false;
        }
    }
}
